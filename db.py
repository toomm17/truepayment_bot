import datetime

import asyncpg
from dateutil.relativedelta import relativedelta

from data.config import PGUSER, PGPASSWORD, HOST


class Database:
    def __init__(self, pool):
        self.pool = pool

    @classmethod
    async def create(cls):
        pool = await asyncpg.create_pool(
            user=PGUSER,
            password=PGPASSWORD,
            host=HOST
        )
        return cls(pool)
        
    async def create_table_users(self):
        sql = '''
            CREATE TABLE IF NOT EXISTS Users (
                id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                Name VARCHAR(255) NOT NULL,
                Telegram_id INT UNIQUE NOT NULL,
                Is_sub BOOLEAN NOT NULL,
                Email VARCHAR(255) UNIQUE,
                Balance INTEGER NOT NULL, 
                Start_sub DATE,
                End_sub DATE,
                Transaction_codes text[],
                Promocode text[]
            )
        '''        
        await self.pool.execute(sql)
        
    async def create_table_promocodes(self):
        sql = '''
            CREATE TABLE IF NOT EXISTS Promocodes (
                Name VARCHAR(255) NOT NULL,
                SUM INT NOT NULL,
                END_PROMOCODE DATE,
                IS_DISPOSABLE BOOL,
            )
        '''
        await self.pool.execute(sql)    
        
    
    # Users Table Methods
    
    @staticmethod
    def format_args(sql, parametrs: dict):
        sql += ' AND '.join([
            f'{item} = ${num}' for num, item in enumerate(parametrs, start=1)
        ])
        return sql, tuple(parametrs.values())
        
    async def add_user(self, username: str, tg_id: int):
        sql = 'INSERT INTO Users (Name, Telegram_id, Is_sub, Balance) VALUES ($1, $2, $3, $4)'
        await self.pool.execute(sql, username, tg_id, False, 0)
        
    async def check_transaction(self, transaction: str):
        sql = 'SELECT * FROM Users WHERE $1 = ANY(Transaction_codes)'
        return await self.pool.execute(sql, transaction)
    
    async def update_balance(self, tg_id: int, balance: int, type: str):
        if type == 'plus':
            sql = 'UPDATE Users SET Balance = Balance + ROUND($1, 1) WHERE Telegram_id = $2'
        else:
            sql = 'UPDATE Users SET Balance = Balance - $1 WHERE Telegram_id = $2'
        return await self.pool.execute(sql, balance, tg_id)
    
    async def update_email(self, tg_id: int, email: str):
        sql = 'UPDATE Users SET Email = $1 WHERE Telegram_id = $2'
        return await self.pool.execute(sql, email, tg_id)
    
    async def update_sub(self, tg_id: int, sub: bool = True):
        sql = 'UPDATE Users SET Is_sub = $1 WHERE Telegram_id = $2'
        return await self.pool.execute(sql, sub, tg_id)
    
    async def update_transaction(self, tg_id: int, transaction: str):
        sql = 'UPDATE Users SET Transaction_codes = array_append(Transaction_codes, $1) WHERE Telegram_id = $2'
        return await self.pool.execute(sql, transaction, tg_id)
    
    async def get_all_info(self, **kwargs):
        sql = 'SELECT * FROM Users WHERE '
        sql, parameters = self.format_args(sql, kwargs)
        return await self.pool.fetchrow(sql, *parameters)
    
    async def update_date_sub(self, tg_id: int, count_months: int):
        start = datetime.date.today()
        end = start + relativedelta(months=count_months)
        sql = 'UPDATE Users SET Start_sub = $1, End_sub = $2 WHERE Telegram_id = $3'
        return await self.pool.execute(sql, start, end, tg_id)
    
    async def extend_sub(self, tg_id: int, count_months: int):
        end_sub_sql = 'SELECT End_sub FROM Users WHERE Telegram_id = $1'
        end_sub_record = await self.pool.fetchrow(end_sub_sql, tg_id)
        end_sub = end_sub_record['end_sub']
        new_end = end_sub + relativedelta(months=count_months)
        sql = 'UPDATE Users SET End_sub = $1 WHERE Telegram_id = $2'
        return await self.pool.execute(sql, new_end, tg_id)
        
    async def get_all_emails(self):
        sql = 'SELECT email FROM Users'
        return await self.pool.fetch(sql)

    async def get_all_id(self):
        sql = 'SELECT telegram_id FROM Users'
        return await self.pool.fetch(sql)

    async def clear_info(self, tg_id: int):
        sql = 'UPDATE Users SET Email = default, Start_sub = default, End_sub = default, Is_sub = False WHERE Telegram_id = $1'
        return await self.pool.execute(sql, tg_id)
    
    async def user_is_sub(self, tg_id: int):
        sql = 'SELECT Is_sub FROM Users WHERE Telegram_id = $1'
        return await self.pool.fetchrow(sql, tg_id)
    
    async def get_user_balance(self, tg_id: int):
        sql = 'SELECT trim_scale(Balance) FROM Users WHERE TELEGRAM_ID = $1'
        return await self.pool.fetchrow(sql, tg_id)
    
    async def get_user_promocode(self, tg_id: int):
        sql = 'SELECT promocode FROM Users WHERE Telegram_id = $1'
        return await self.pool.fetchrow(sql, tg_id)
    
    
    # Promocode Table Methods 
    
    async def create_promocode(self, name: str, sum: int, is_disposable: bool = False, end_promocode_days: int = None):
        if is_disposable:
            sql = '''INSERT INTO promocodes (promocode, sum, is_active, is_disposable) VALUES ($1, $2, $3, $4)'''
            return await self.pool.execute(sql, name, sum, True, is_disposable)
        
        today = datetime.datetime.today()
        end_date = today + datetime.timedelta(days=end_promocode_days)
        sql = '''INSERT INTO promocodes (promocode, sum, is_active, end_date) VALUES ($1, $2, $3, $4)'''
        return await self.pool.execute(sql, name, sum, True, end_date)
    
    async def get_promocode(self, promocode_name: str):
        sql = '''SELECT * FROM promocodes WHERE promocode = $1 AND is_active = $2'''
        return await self.pool.fetchrow(sql, promocode_name, True)
    
    async def deactivate_promocode(self, promocode_name: str):
        sql = '''UPDATE promocodes SET is_active = $1 WHERE promocode = $2'''
        return await self.pool.execute(sql, False, promocode_name)
    
    async def user_update_promocode(self, tg_id: int, promocode_name: str):
        # UPDATE Users SET Transaction_codes = array_append(Transaction_codes, $1) WHERE Telegram_id = $2
        sql = '''UPDATE Users SET promocode = array_append(promocode, $1) WHERE Telegram_id = $2'''
        return await self.pool.execute(sql, promocode_name, tg_id)        
    
